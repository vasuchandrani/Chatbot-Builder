<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Your Chatbot</title>

    <style>
        /* General Layout */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }

        /* Drop Area */
        #dropArea {
            border: 2px dashed #4CAF50;
            padding: 20px;
            margin: 20px auto;
            width: 60%;
            text-align: center;
            background-color: #fff;
            cursor: pointer;
        }

        #dropArea:hover {
            background-color: #eaf6ea;
        }
    </style>
</head>

<body>

    <h2>Create Your Chatbot</h2>

    <!-- Chatbot Creation Form -->
    <form id="chatbotForm" enctype="multipart/form-data">
        <h4>Upload Documents</h4>

        <input type="text" id="botName" name="botName" placeholder="Chatbot Name" required>
        
        <div id="dropArea">
            <p>Drag & Drop your PDF files here or click to upload</p>
            <input type="file" id="fileInput" name="documents" accept="application/pdf" multiple>
        </div>  
        
        <button type="button" id="uploadBtn">Upload Files</button>
    </form>

    <!-- Show Uploaded Data -->
    <button id="showDataBtn">Show Data</button>
    <div id="uploadedFiles"></div>

    <!-- Save & Deploy -->
    <button id="deployBtn">Save & Deploy</button>

    <script>
        document.getElementById("uploadBtn").addEventListener("click", async () => {
            const chatbotName = document.getElementById("botName").value.trim();
            const userId = "exampleUser"; 

            if (!chatbotName) {
                alert("Chatbot name is required before uploading files.");
                return;
            }

            const fileInput = document.getElementById("fileInput");
            if (fileInput.files.length === 0) {
                alert("Please select at least one file to upload.");
                return;
            }

            const formData = new FormData();
            formData.append("userId", userId); // ✅ Ensure `userId` is included
            formData.append("chatbotName", chatbotName); // ✅ Ensure `chatbotName` is included
            for (let i = 0; i < fileInput.files.length; i++) {
                formData.append("documents", fileInput.files[i]);
            }

            const response = await fetch("/chatbot/upload", {
                method: "POST",
                body: formData
            });

            const result = await response.json();
            alert(result.message);
        });

        document.getElementById("showDataBtn").addEventListener("click", async () => {
            const chatbotName = document.getElementById("botName").value.trim();
            const userId = "exampleUser"; 

            if (!chatbotName) {
                alert("Chatbot name is required before showing data.");
                return;
            }

            const response = await fetch("/chatbot/showData", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ userId, chatbotName })
            });

            const files = await response.json();
            document.getElementById("uploadedFiles").innerHTML = files.map(f => 
                `<p><a href="${f.url}" target="_blank">${f.name}</a></p>`
            ).join("");
        });

        document.getElementById("deployBtn").addEventListener("click", async () => {
            const chatbotName = document.getElementById("botName").value.trim();
            const userId = "exampleUser";

            if (!chatbotName) {
                alert("Chatbot name is required before deploying.");
                return;
            }

            // ✅ Fix: Ensure chatbot ID is retrieved before deploying
            const response = await fetch("/chatbot/getChatbotId", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ chatbotName })
            });

            const chatbotData = await response.json();

            if (!chatbotData.chatbotId) {
                alert("Chatbot ID not found. Please upload files first.");
                return;
            }

            // ✅ Fix: Ensure deployment happens correctly and returns embed code
            const deployResponse = await fetch("/chatbot/deploy", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ chatbotId: chatbotData.chatbotId, userId, chatbotName })
            });

            const result = await deployResponse.json();
            alert(result.message);

            if (result.embedCode) {
                document.getElementById("embedCodeDisplay").innerHTML = `<pre>${result.embedCode}</pre>`;
                
                // ✅ Fix: Automatically redirect to chatbot rendering page after deployment
                setTimeout(() => {
                    window.location.href = `/chatbot/render?botId=${chatbotData.chatbotId}`;
                }, 2000);
            }
        });
    </script>

    <div id="embedCodeDisplay"></div>
</body>
</html>